import numpy as np
import csv 
def load_csv(dataset_path, delimiter = ",", usecols = None, converters=None):
    """
    creates a structured numpy array from a csv file

    :param dataset_path: path (relative to project source) of the .csv file
    :type dataset_path: str
    :param delimiter: delimiter of the csv file, defaults to ","
    :type delimiter: str, optional
    :param usecols: list of columns to use (specified by their indices), defaults to all columns
    :type usecols: list of ints, optional
    :param converters: Converters (lambda functions taking one argument) to use on certain columns, defaults to None
    :type converters: Dict of { column_index: lambda_function} entries, optional
    :return: a structured numpy array of the csv
    """
    dtype = None # figure out the types by first trying Bool, the Int, then Float
    names = True # use first row as column names
    
    if usecols is not None:
        data = np.genfromtxt(dataset_path, dtype=dtype, delimiter=delimiter, names=names, usecols= usecols,converters=converters )
    else: 
        data = np.genfromtxt(dataset_path, dtype=dtype, delimiter=delimiter, names=names,converters=converters)

    return data
    
def split_dataset(dataset, test_ratio = 0.1):
    """
    splits the dataset in train and testset according to the test_ratio 

    :param dataset: structured numpy array of datapoints (as for example generated by the load_csv function)
    :type dataset: structured numpy array
    :param test_ratio: ratio of samples to set aside for the test set, defaults to 0.1
    :type test_ratio: float, optional
    :return: (trainset, testset)
    :rtype: tuple of structured numpy arrays
    """

    np.random.seed(2020) # fix seed for reproducability 
    shuffled_indices = np.random.permutation(len(dataset))
    test_set_size = int(len(dataset)*test_ratio)
    test_indices = shuffled_indices[:test_set_size]
    train_indices =shuffled_indices[test_set_size:]


    return dataset[train_indices], dataset[test_indices]


def write_csv(data, filename):
    """
    GIVEN FUNCTION 

    writes a structured numpy array into a csv, datatypes should be only integers or floats
    floats are formatted using 3 decimal values

    :param data: the data to be written
    :type data: structured numpy array
    :param filename: relative path (wrt project source root)
    :type filename: string
    """
    # create format array
    fmt = []
    for name in data.dtype.names:
        t = str(data.dtype[name])[0]
        if t is "i":
            fmt.append("%d")
        elif t is "f":
            fmt.append("%3.3f")
        else: 
            raise TypeError

     # create header
    header = ','.join(data.dtype.names)

    np.savetxt(filename, data, delimiter=',', header=header, fmt=fmt, comments="")

def create_csv_submission(ids, y_pred, name):
    """
    Creates an output file in csv format for submission to kaggle
    Arguments: ids (event ids associated with each prediction)
               y_pred (predicted class labels): 0 for background & 1 for higgs
               name (string name of .csv output file to be created)

    labels will be converted to 1, -1 as required for the platform
    """

    with open(name, 'w') as csvfile:
        fieldnames = ['Id', 'Prediction']

        y_pred = 2* np.array(y_pred) -1 #convert to -1,1

        writer = csv.DictWriter(csvfile, delimiter=",", fieldnames=fieldnames, lineterminator="\n")
        writer.writeheader()
        for r1, r2 in zip(ids, y_pred):
            writer.writerow({'Id':int(r1),'Prediction':int(r2)})

if __name__ == "__main__":
    """
    generate labelled testset and trainset from the original trainset, converting Higgs to 1 and background to 0 in the prediction column. 
    """

    convertfunc = lambda x: 0 if b'b' in x else 1 # convertfucntion for Prediction column to 0 if bg, and 1 if signal
    converters={"Prediction": convertfunc}
    dataset = load_csv("dataset/train.csv", converters=converters)
    train,test = split_dataset(dataset)
    write_csv(train, "dataset/trainset.csv")
    write_csv(test,"dataset/testset.csv")